# Group Rules
Endpoints to manage rules, rule settings, preview running rules, run rules, and rule job statuses.

Rules allow bulk modification of campaign settings based on a filter and a condition.

<a href='#Filter'>Filter</a>s enable matching only within certain networks, accounts, or individual campaigns. These parameters are also used when querying the reporting system and are applied using logical `OR`. This means you can request matching on several accounts for the same rule, or attempt matching for all accounts by default to keep the criteria as broad as possible.

<a href='#Condition'>Condition</a>s specify how objects are selected for applying changes, and include a metric, operator, expected value, and a date range. These parameters are used when querying the reporting system and are applied using logical `AND`. This means the more conditions applied, the more narrow the matching criteria.

A rule will always have at least one filter one condition, and its first condition will always use the `campaign.cost` metric.

The following rule types are supported...

:[](tables/RuleType.apib)

## Get Rules [/rules]

The structure of a rule and its constituents are described as follows...

:[](tables/Rule.apib)

:[](tables/Filter.apib)
- Filters may specify a **source**, an **account_id**, and a **campaign_id**, or can be set to `null` indicating non-specific.
- For example, a filter can have **source** set to `outbrain`, **account_id** set to `3216`, and **campaign_id** set to `null` to ask for any campaign in the Outbrain account whose ID is `3216`.
- A filter can also have all optional values set to `null` to indicate "include all networks, accounts, and campaigns known to Brax".
- Or a filter may specify only **source** and leave the other two `null` to indicate only campaigns in the given network.
- If **campaign_id** is set, the other two must also be set, and likewise when **account_id** is set, **source** must also be set.

:[](tables/Condition.apib)

#### Metric <a name="Metric" />
Metric is a string composed of an object and a metric separated by a dot, i.e. **reporting_object**.**metric_field**

Reporting object can be one of: `campaign`, `ad`, `publisher`, `target`, `section`, `ad_group`

Metric field can be one of the standard <a href="#ReportingMetrics">ReportingMetrics</a>:

`impressions`, `clicks`, `conversions`, `cost`, `ctr`, `ecpc`, `cpa`, `icr`

Or one of the <a href="#GoogleAnalyticsMetrics">GoogleAnalyticsMetrics</a>:

`sessions`, `pageviews`, `pageviews_per_session`, `bounce_rate`, `avg_session_duration`, `goal_1_completions`, `goal_2_completions`

**Examples**

- `campaign.clicks` - Clicks for a campaign
- `target.ctr` - Click-through rate for a target
- `publisher.conversions` - Number of conversions for a publisher

### List Rules [GET /rules{?offset,limit}]

+ Parameters
    :[](params/pagination.apib)

+ Request (application/json)
    + Headers

            :[](headers/basic.apib)



+ Response 200 (application/json)

    + Headers

            :[](headers/ratelimit.apib)

    + Attributes
        + `results` (array[Rule])
        + `pagination` (Pagination)

    + Body

            :[](../json/rules.json)


### Rule by ID [GET /rules/{rule_id}]

+ Parameters
    + `rule_id` (ID, required)

+ Request (application/json)
    + Headers

            :[](headers/basic.apib)

+ Response 200 (application/json)
    + Attributes (Rule)

    + Body

            :[](../json/rules_by_id.json)


## Running Rules [/rules/{rule_id}]

Before running a rule, you may want to find out what the rule will do.
The preview endpoint can be used to return details showing potential result of running a rule, including the current rule settings, and the affected objects.

A POST request sent to the run endpoint will enqueue the running of the specified rule with the default match items selected,
and return a response with the `job_id` of the job which can be queried via the status endpoint below.


Rule previews have the following structure...
:[](tables/RulePreview.apib)
:[](tables/Match.apib)

Depending on how a rule is configured, there will be multiple object metrics shown in the response. The field names will contain spaces for these metrics.

### Preview a Rule by ID [GET /rules/{rule_id}/preview]

+ Parameters
    + `rule_id` (ID, required)

+ Request (application/json)
    + Headers

            :[](headers/basic.apib)

+ Response 200 (application/json)
    + Attributes (RulePreview)

    + Body

            :[](../json/rule_preview.json)


## Run a Rule by ID [POST /rules/{rule_id}/run]

+ Parameters
    + `rule_id` (ID, required)

+ Request (application/json)
    + Headers

            :[](headers/basic.apib)

+ Response 200 (application/json)
    + Attributes (RuleRun)

    + Body

            :[](../json/rule_run.json)




## Rule Job Status [/rules/jobs]

After running a rule, its running status can be checked to show confirm whether the desired changes have been made.

The status endpoint returns the status details of a job for running a rule, and the history endpoint returns a list of jobs currently running or that have run in the past.


### Job history [GET]

+ Request (application/json)
    + Headers

            :[](headers/basic.apib)

+ Response 200 (application/json)

    + Headers
    
            :[](headers/ratelimit.apib)

    + Attributes
        - `results` (array[RuleJob])
        - `pagination` (Pagination)

    + Body

            :[](../json/rule_jobs.json)


## Job Status Job ID [GET /rules/jobs/{job_id}]

+ Parameters
    + `job_id` (ID, required)

+ Request (application/json)
    + Headers

            :[](headers/basic.apib)

+ Response 200 (application/json)
    + Attributes
        + `job` (RuleStatus) - running status of the job

    + Body

            :[](../json/rule_status.json)

